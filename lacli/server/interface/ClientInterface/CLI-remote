#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted,new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import CLI
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool PingCLI()'
  print '  void CloseWhenPossible()'
  print '  bool LoginUser(string username, string Pass, bool Remember)'
  print '  bool UserIsLoggedIn()'
  print '  bool Logout()'
  print '   GetCapsules()'
  print '  Archive CreateArchive( filePaths)'
  print '   GetUploads()'
  print '  void UploadToCapsule(string ArchiveLocalID, string CapsuleID, string title, string description)'
  print '  void ResumeUpload(string ArchiveLocalID)'
  print '  TransferStatus QueryArchiveStatus(string ArchiveLocalID)'
  print '  void PauseUpload(string ArchiveLocalID)'
  print '  void CancelUpload(string ArchiveLocalID)'
  print '   GetCertificates()'
  print '  string ExportCertificate(string ArchiveID, CertExportFormat format)'
  print '  void Decrypt(string archivePath, string key, string destinationPath)'
  print '  Settings GetSettings()'
  print '  void SetSettings(Settings settings)'
  print '  VersionInfo GetLatestVersion()'
  print '  VersionInfo GetVersion()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = CLI.Client(protocol)
transport.open()

if cmd == 'PingCLI':
  if len(args) != 0:
    print 'PingCLI requires 0 args'
    sys.exit(1)
  pp.pprint(client.PingCLI())

elif cmd == 'CloseWhenPossible':
  if len(args) != 0:
    print 'CloseWhenPossible requires 0 args'
    sys.exit(1)
  pp.pprint(client.CloseWhenPossible())

elif cmd == 'LoginUser':
  if len(args) != 3:
    print 'LoginUser requires 3 args'
    sys.exit(1)
  pp.pprint(client.LoginUser(args[0],args[1],eval(args[2]),))

elif cmd == 'UserIsLoggedIn':
  if len(args) != 0:
    print 'UserIsLoggedIn requires 0 args'
    sys.exit(1)
  pp.pprint(client.UserIsLoggedIn())

elif cmd == 'Logout':
  if len(args) != 0:
    print 'Logout requires 0 args'
    sys.exit(1)
  pp.pprint(client.Logout())

elif cmd == 'GetCapsules':
  if len(args) != 0:
    print 'GetCapsules requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetCapsules())

elif cmd == 'CreateArchive':
  if len(args) != 1:
    print 'CreateArchive requires 1 args'
    sys.exit(1)
  pp.pprint(client.CreateArchive(eval(args[0]),))

elif cmd == 'GetUploads':
  if len(args) != 0:
    print 'GetUploads requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetUploads())

elif cmd == 'UploadToCapsule':
  if len(args) != 4:
    print 'UploadToCapsule requires 4 args'
    sys.exit(1)
  pp.pprint(client.UploadToCapsule(args[0],args[1],args[2],args[3],))

elif cmd == 'ResumeUpload':
  if len(args) != 1:
    print 'ResumeUpload requires 1 args'
    sys.exit(1)
  pp.pprint(client.ResumeUpload(args[0],))

elif cmd == 'QueryArchiveStatus':
  if len(args) != 1:
    print 'QueryArchiveStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.QueryArchiveStatus(args[0],))

elif cmd == 'PauseUpload':
  if len(args) != 1:
    print 'PauseUpload requires 1 args'
    sys.exit(1)
  pp.pprint(client.PauseUpload(args[0],))

elif cmd == 'CancelUpload':
  if len(args) != 1:
    print 'CancelUpload requires 1 args'
    sys.exit(1)
  pp.pprint(client.CancelUpload(args[0],))

elif cmd == 'GetCertificates':
  if len(args) != 0:
    print 'GetCertificates requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetCertificates())

elif cmd == 'ExportCertificate':
  if len(args) != 2:
    print 'ExportCertificate requires 2 args'
    sys.exit(1)
  pp.pprint(client.ExportCertificate(args[0],eval(args[1]),))

elif cmd == 'Decrypt':
  if len(args) != 3:
    print 'Decrypt requires 3 args'
    sys.exit(1)
  pp.pprint(client.Decrypt(args[0],args[1],args[2],))

elif cmd == 'GetSettings':
  if len(args) != 0:
    print 'GetSettings requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetSettings())

elif cmd == 'SetSettings':
  if len(args) != 1:
    print 'SetSettings requires 1 args'
    sys.exit(1)
  pp.pprint(client.SetSettings(eval(args[0]),))

elif cmd == 'GetLatestVersion':
  if len(args) != 0:
    print 'GetLatestVersion requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetLatestVersion())

elif cmd == 'GetVersion':
  if len(args) != 0:
    print 'GetVersion requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetVersion())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
