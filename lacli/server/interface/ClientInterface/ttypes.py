#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted,new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ErrorType(object):
  NoError = 0
  Server = 1
  nNetwork = 2
  Authentication = 3
  Validation = 4
  Other = 5

  _VALUES_TO_NAMES = {
    0: "NoError",
    1: "Server",
    2: "nNetwork",
    3: "Authentication",
    4: "Validation",
    5: "Other",
  }

  _NAMES_TO_VALUES = {
    "NoError": 0,
    "Server": 1,
    "nNetwork": 2,
    "Authentication": 3,
    "Validation": 4,
    "Other": 5,
  }


class InvalidOperation(TException):
  """
  Attributes:
   - what
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'what', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, what=None, why=None,):
    self.what = what
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.what = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOperation')
    if self.what is not None:
      oprot.writeFieldBegin('what', TType.I32, 1)
      oprot.writeI32(self.what)
      oprot.writeFieldEnd()
    if self.why is not None:
      oprot.writeFieldBegin('why', TType.STRING, 2)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DateInfo(object):
  """
  Attributes:
   - Day
   - Month
   - Year
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Day', None, None, ), # 1
    (2, TType.I32, 'Month', None, None, ), # 2
    (3, TType.I32, 'Year', None, None, ), # 3
  )

  def __init__(self, Day=None, Month=None, Year=None,):
    self.Day = Day
    self.Month = Month
    self.Year = Year

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Day = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Month = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Year = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DateInfo')
    if self.Day is not None:
      oprot.writeFieldBegin('Day', TType.I32, 1)
      oprot.writeI32(self.Day)
      oprot.writeFieldEnd()
    if self.Month is not None:
      oprot.writeFieldBegin('Month', TType.I32, 2)
      oprot.writeI32(self.Month)
      oprot.writeFieldEnd()
    if self.Year is not None:
      oprot.writeFieldBegin('Year', TType.I32, 3)
      oprot.writeI32(self.Year)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransferStatus(object):
  """
  Attributes:
   - StatusDescription
   - ETA
   - RemainingMB
   - Progress
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'StatusDescription', None, None, ), # 1
    (2, TType.STRING, 'ETA', None, None, ), # 2
    (3, TType.I32, 'RemainingMB', None, None, ), # 3
    (4, TType.DOUBLE, 'Progress', None, None, ), # 4
  )

  def __init__(self, StatusDescription=None, ETA=None, RemainingMB=None, Progress=None,):
    self.StatusDescription = StatusDescription
    self.ETA = ETA
    self.RemainingMB = RemainingMB
    self.Progress = Progress

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.StatusDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ETA = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.RemainingMB = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.Progress = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransferStatus')
    if self.StatusDescription is not None:
      oprot.writeFieldBegin('StatusDescription', TType.STRING, 1)
      oprot.writeString(self.StatusDescription)
      oprot.writeFieldEnd()
    if self.ETA is not None:
      oprot.writeFieldBegin('ETA', TType.STRING, 2)
      oprot.writeString(self.ETA)
      oprot.writeFieldEnd()
    if self.RemainingMB is not None:
      oprot.writeFieldBegin('RemainingMB', TType.I32, 3)
      oprot.writeI32(self.RemainingMB)
      oprot.writeFieldEnd()
    if self.Progress is not None:
      oprot.writeFieldBegin('Progress', TType.DOUBLE, 4)
      oprot.writeDouble(self.Progress)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Capsule(object):
  """
  Attributes:
   - Created
   - ID
   - Resource_URI
   - Title
   - User
   - ExpirationDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Created', None, None, ), # 1
    (2, TType.STRING, 'ID', None, None, ), # 2
    (3, TType.STRING, 'Resource_URI', None, None, ), # 3
    (4, TType.STRING, 'Title', None, None, ), # 4
    (5, TType.STRING, 'User', None, None, ), # 5
    (6, TType.STRUCT, 'ExpirationDate', (DateInfo, DateInfo.thrift_spec), None, ), # 6
  )

  def __init__(self, Created=None, ID=None, Resource_URI=None, Title=None, User=None, ExpirationDate=None,):
    self.Created = Created
    self.ID = ID
    self.Resource_URI = Resource_URI
    self.Title = Title
    self.User = User
    self.ExpirationDate = ExpirationDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Created = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.Resource_URI = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.User = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ExpirationDate = DateInfo()
          self.ExpirationDate.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Capsule')
    if self.Created is not None:
      oprot.writeFieldBegin('Created', TType.STRING, 1)
      oprot.writeString(self.Created)
      oprot.writeFieldEnd()
    if self.ID is not None:
      oprot.writeFieldBegin('ID', TType.STRING, 2)
      oprot.writeString(self.ID)
      oprot.writeFieldEnd()
    if self.Resource_URI is not None:
      oprot.writeFieldBegin('Resource_URI', TType.STRING, 3)
      oprot.writeString(self.Resource_URI)
      oprot.writeFieldEnd()
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 4)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    if self.User is not None:
      oprot.writeFieldBegin('User', TType.STRING, 5)
      oprot.writeString(self.User)
      oprot.writeFieldEnd()
    if self.ExpirationDate is not None:
      oprot.writeFieldBegin('ExpirationDate', TType.STRUCT, 6)
      self.ExpirationDate.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Archive(object):
  """
  Attributes:
   - ID
   - Title
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ID', None, None, ), # 1
    (2, TType.STRING, 'Title', None, None, ), # 2
  )

  def __init__(self, ID=None, Title=None,):
    self.ID = ID
    self.Title = Title

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Archive')
    if self.ID is not None:
      oprot.writeFieldBegin('ID', TType.STRING, 1)
      oprot.writeString(self.ID)
      oprot.writeFieldEnd()
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 2)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Certificate(object):
  """
  Attributes:
   - Title
   - Description
   - HexDigitsKey
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Title', None, None, ), # 1
    (2, TType.STRING, 'Description', None, None, ), # 2
    (3, TType.STRING, 'HexDigitsKey', None, None, ), # 3
  )

  def __init__(self, Title=None, Description=None, HexDigitsKey=None,):
    self.Title = Title
    self.Description = Description
    self.HexDigitsKey = HexDigitsKey

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.HexDigitsKey = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Certificate')
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 1)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    if self.Description is not None:
      oprot.writeFieldBegin('Description', TType.STRING, 2)
      oprot.writeString(self.Description)
      oprot.writeFieldEnd()
    if self.HexDigitsKey is not None:
      oprot.writeFieldBegin('HexDigitsKey', TType.STRING, 3)
      oprot.writeString(self.HexDigitsKey)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
